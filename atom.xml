<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tosik blog]]></title>
  <link href="http://tosik.github.com/atom.xml" rel="self"/>
  <link href="http://tosik.github.com/"/>
  <updated>2012-10-01T01:28:18+09:00</updated>
  <id>http://tosik.github.com/</id>
  <author>
    <name><![CDATA[Toshiyuki Hirooka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion の files_dependencies をちょっと助けてくれる gem 'motion-dependencies']]></title>
    <link href="http://tosik.github.com/blog/2012/10/01/rubymotion-gems-for-files-dependencies/"/>
    <updated>2012-10-01T00:48:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/10/01/rubymotion-gems-for-files-dependencies</id>
    <content type="html"><![CDATA[<p>ひとまず、RubyMotion の files_dependencies がとても面倒であるということを伝えたい。
最近 Ruby でコードを書くときは大抵 ActiveSupport::Dependencies のちからを借りて、複雑な依存関係の解決をすべて任せている。</p>

<p>当然のことながら RubyMotion ではこの恩恵はいただくことができない。全く残念である。</p>

<h1>motion-dependencies</h1>

<p>ちょっとでも RubyMotion でコンパイルされるファイルの依存関係を指定できないだろうかと探していたらこんなものが。</p>

<p><a href="https://github.com/fleitz/motion-dependencies">motion-dependencies</a></p>

<p>README を見てもちょっとわかりにくいのだが、ソースコード中に &#8216;# depends path/to/code.rb&#8217; のようなコメントを書けば、
そのソースコードファイルは &#8216;path/to/code.rb&#8217; に依存している、ということを指定できるというものだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># depends your-mixin.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FooViewController</span> <span class="o">&lt;</span> <span class="no">UIViewController</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">YourMixin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Motion</span><span class="o">::</span><span class="no">Dependencies</span><span class="o">.</span><span class="n">find_dependencies</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">files</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; {&quot;./foo_view_controller.rb&quot; =&gt; [&quot;./your-mixin.rb&quot;]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という結果が得られる。
なので、これを Rakefile に書いてあるように app.file_dependencies に突っ込めばよい。
詳細は README を！</p>

<h1>ひとまずこれで</h1>

<p>今作ってるアプリはこれを使っていこうと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 の RubyMotion AutoComplete を無効にする方法]]></title>
    <link href="http://tosik.github.com/blog/2012/09/16/how-to-disable-rubymotion-autocompletion-of-sublime-text-2/"/>
    <updated>2012-09-16T16:03:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/09/16/how-to-disable-rubymotion-autocompletion-of-sublime-text-2</id>
    <content type="html"><![CDATA[<p>最近、VIM から Sublime Text 2 に乗り換えた。
ファイルの検索が早くて、これなしじゃ生きていけなくなってきてる。</p>

<p>前置きはさておき</p>

<h2>でしゃばりやさんの RubyMotion AutoComplete</h2>

<p>Sublime Text 2 の RubyMotionSublimeCompletions という自動補完プラグインがあるのだが、
どうも普段の Ruby を書いてる時に、この補完がでしゃばってきて仕方がない。</p>

<p><img src="http://tosik.github.com/images/uploaded/0e49fc87e854a527e52487118f187b87.png" alt="でしゃばった補完の例" /></p>

<p>これは困った。
Command + Shift + p で &#8216;Set Syntax: Ruby&#8217; を実行しても改善されない。</p>

<h2>お前の出る幕ではない！</h2>

<p>Package Control が入った環境を用意しよう。そしてそれを使って RubyMotion Autocomplete をインストールしよう。Sublime ザムライならみんな入ってると思うけど。</p>

<p>次に、RubyMotion が背中を見せた瞬間をついて Command + Shift + p で &#8216;Package Control: Disable Package&#8217; を実行して、&#8217;RubyMotion Autocomplete&#8217; を選択する。</p>

<p><img src="http://tosik.github.com/images/uploaded/25d56d7f616991999be4c00a01dfc437.png" alt="不意をついた様子1" /></p>

<p><img src="http://tosik.github.com/images/uploaded/2d97a45a810bf12ba3c4443e7e50cae5.png" alt="不意をついた様子2" /></p>

<p>この間 0.5 秒！
パッケージを無効化してやれば、どうあがこうがでしゃばることなどできない。どうだ！</p>

<p><img src="http://tosik.github.com/images/uploaded/27b506a40114bace8613736a66974cc0.png" alt="どうだ、無効化されただろうの例" /></p>

<p>かわいそうなので RubyMotion を書くときは有効化してあげたいので、Command + Shift + p で &#8216;Package Control: Enable Package&#8217; を実行して、&#8217;RubyMotion Autocomplete&#8217; を選択してあげてね。</p>

<h2>もっといい方法</h2>

<p>あったらおしえてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion について感想]]></title>
    <link href="http://tosik.github.com/blog/2012/09/13/about-rubymotion/"/>
    <updated>2012-09-13T21:24:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/09/13/about-rubymotion</id>
    <content type="html"><![CDATA[<p>個人的な事情で RubyMotion を触り始めた。感想</p>

<h2>iOS SDK が全部そのまま使える</h2>

<p>iOS SDK をほとんど制約を受けずにそのまま利用可能だった。
すなわち、UIViewController などのクラスが Ruby から利用できる。</p>

<p>言い換えれば、それ以外のことはほとんどしてくれていないってこと。
Objective-C でやっていた時と同じように使えるので、じゃあ Objective-C で書けばいいじゃんって思う人もいるだろうね。</p>

<h2>Ruby でかける素晴らしさ</h2>

<p>RubyMotion の重要なところは、Ruby という言語を扱えることだ。
Ruby が今までに培った文化、思想が iOS アプリケーション開発でも利用できることは Rubyist にとって非常に
大きな事であることは間違いない。</p>

<p>ただ、残念なことがある。</p>

<h2>Ruby っぽくないところは排除されていない</h2>

<p>Rubyist なら以下のコードに奇妙さを覚えるだろう。</p>

<pre><code>def initWithNibName(name, bundle: bundle)
  super
  self.navigationItem.title = 'メインビュー'
  self.tabBarItem = UITabBarItem.alloc.initWithTabBarSystemItem(UITabBarSystemItemFavorites, tag: 1)
end
</code></pre>

<p>これが Ruby だって！？
Camel-Case が非常に気持ち悪い。長ったらしいメソッドが腹立たしい。</p>

<p>こういうコードはいたるところに登場してしまう。
それは、iOS SDK を Objective-C のときと同じインターフェイスでそのまま使用しているからだ。
RubyMotion は iOS SDK を Ruby で扱えるようにしてくれてはいるが、
iOS SDK を Ruby らしいライブラリに置き換えてくれているわけではない。</p>

<p>RubyMotion を初めて使う人はその点を注意していただきたい。</p>

<h2>gems の悲鳴</h2>

<p>実は、RubyGems などに上がっているほとんどの gem は RubyMotion では使えない。
まず、require が使えない。また OS に近い操作やメタプログラミングなどがかなり制限されている。
これらの理由により、既存の gem はほぼ使えない。
Rubyist たちがこれまで多くの知恵を絞って生み出されてきた宝石箱は RubyMotion の体質には合わないのだ。</p>

<p>そのかわり、RubyMotion 用に作った gem は bundle install でうまく入れられる。</p>

<h2>Ruby っぽくないところの排除を試みる gem たち</h2>

<p>RubyMotion のための gem はいくつかある。
例えば、<a href="https://github.com/fusionbox/sugarcube">sugarcube</a> は helper collection で、</p>

<pre><code>self.view.addSubview(subview)
</code></pre>

<p>と書かなければならないところを</p>

<pre><code>self.view &lt;&lt; subview
</code></pre>

<p>と Ruby らしく書かせてくれるなど、様々な Ruby らしさを RubyMotion に与えてくれる。
似たようなものに <a href="https://github.com/mattetti/BubbleWrap">BubbleWrap</a> というものもある。</p>

<h2>結局 iOS SDK</h2>

<p>結局のところ、iOS SDK について理解する必要は排除できなかった。
そのために知識を得るために Objective-C が読めなくてはいけなくなり、
Objective-C で書かれたコードをどうやって Ruby に直せばよいか考えるのが面倒になるなんて皮肉は毎日存在する。</p>

<p>DSL で書きたいな、なんて発想が芽生えてしまえば1日はあっという間に過ぎてしまう。
できれば出来上がっていくスピードに驚きながら夜更かししたいものだ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日常 Git]]></title>
    <link href="http://tosik.github.com/blog/2012/09/13/git-every-day/"/>
    <updated>2012-09-13T03:14:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/09/13/git-every-day</id>
    <content type="html"><![CDATA[<p>git で普段使ってる自分の操作を紹介。</p>

<h2>前提</h2>

<p>remotes は origin のみ。</p>

<p>いつでも最新にしておきたい fetch</p>

<pre><code>% git fetch
</code></pre>

<p>これで origin の全部を取ってきてる。
これをわかってない人がびっくりするくらい多い。</p>

<h2>トピックブランチづくり</h2>

<p>foo というフィーチャーブランチから bar トピックブランチを作りたいとき。</p>

<pre><code>% git fetch
% git checkout origin/foo -b foo/bar
</code></pre>

<p>ぼくは手元に remote の写しをおいておかない。つねに origin/foo のように remotes refspec から参照している。</p>

<h2>なるべく早めのリベース</h2>

<p>git を覚えたての人たちは</p>

<pre><code>% git checkout foo
% git pull
% git checkout foo_bar
% git rebase foo
</code></pre>

<p>などしてるけど、長いし怖いし foo_bar って書きたくない。</p>

<p>だからぼくはいつも</p>

<pre><code>% git pull --rebase origin foo
</code></pre>

<p>ってしてる。ちなみに後述するが、git up って alias にしてる。</p>

<h2>release management をしてるときにもってこい</h2>

<pre><code>% git shortlog origin/foo..origin/master
</code></pre>

<p>origin/master とどれくらい離れてるかを author で分類してくれるので、非常にすっきりして見やすい。</p>

<p>誰が何をしてるかだいたい把握してるので、リリースマネージメントをしていた頃は重宝した。</p>

<h2>過去の修正を過去に戻らず行う</h2>

<p>トピックブランチが進むと過去の修正をしたくなることは多々ある。
そういうとき、おもむろに git rebase -i HEAD~5 とかして該当箇所を edit するが、rebase 中の編集ほど怖いものはない。
だからぼくはいつもこうしてる。</p>

<p>編集中に修正が必要だと思ったらまず、コードを修正する！
そして</p>

<pre><code>% git add -p
</code></pre>

<p>で該当する修正のみ選択的にステージへ。</p>

<pre><code>% git commit -m 'fugafuga'
</code></pre>

<p>と、修正したものだけのコミットを適当に作る。</p>

<pre><code>% git stash
% git rebase -i HEAD~5
</code></pre>

<p>でさかのぼって、さっきの fugafuga を修正したいコミットの直後に移動して squash にして rebase スタート！</p>

<p>だいたいコンフリクトは発生しない。発生するような修正はこの手順だと修正は辛いが、コンフリクトのお陰でこの時点で気づいたりする。
コミットメッセージの編集で fugafuga を消せば、rebase が無事終了して何事もなかったように再開できる。</p>

<pre><code>% git stash pop
</code></pre>

<h2>alias</h2>

<pre><code>git branch -&gt; git br
git fetch -&gt; git fe
git pull --rebase origin __current_branch__ -&gt; git up
</code></pre>

<p>その設定は</p>

<pre><code>[alias]
  topic = "!sh -c 'git co $1 -b $1/$2' __dummy__"
  up = "!sh -c 'git pull --rebase origin $1' __dummy__"
</code></pre>

<p>詳細は <a href="https://github.com/tosik/dotfiles/blob/master/.gitconfig">https://github.com/tosik/dotfiles/blob/master/.gitconfig</a></p>

<h2>読んでおくべき本</h2>

<p><img src="http://www.oreilly.co.jp/books/images/picture978-4-87311-440-8.gif" alt="実用GIT" /></p>

<p><a href="http://www.oreilly.co.jp/books/9784873114408/">http://www.oreilly.co.jp/books/9784873114408/</a></p>

<p>この本を読んでおけば Refspec や git branch の仕組みなど、内部技術に近い理解が進むので、迷うことなく git が取り扱えるようになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress のバージョン管理]]></title>
    <link href="http://tosik.github.com/blog/2012/09/12/versioning-octopress/"/>
    <updated>2012-09-12T13:50:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/09/12/versioning-octopress</id>
    <content type="html"><![CDATA[<h2>前提</h2>

<p>Octopress を正常な方法で github で使える状態にしていれば次のようになっているはず。（もちろん tosik の部分はあなたのユーザ名）</p>

<pre><code>% git remote -v
octopress       git://github.com/imathis/octopress.git (fetch)
octopress       git://github.com/imathis/octopress.git (push)
origin  git@github.com:tosik/tosik.github.com.git (fetch)
origin  git@github.com:tosik/tosik.github.com.git (push)
</code></pre>

<h2>記事のソースや Gemfile をバージョン管理したい</h2>

<pre><code>% git branch
* source
</code></pre>

<p>と出るので、ローカルのブランチは Octopress により自動的に source になっている。
なので、そのまま github へ push すればよいので</p>

<pre><code>% git push origin source:source
</code></pre>

<p>もしくは単に git push で origin すなわち github に source を保存できる。
もちろんコミットしていなければ push されないのは git ユーザならご承知なので割愛。</p>

<h2>Octopress のバージョンは？</h2>

<p>次のようにすれば Octopress のバージョンを自分のリポジトリに取り込める。</p>

<pre><code>% git fetch
% # octopress の tag が動いてる？
% git merge v2.0
</code></pre>

<p>こうすれば、origin の source では Gemfile や記事のソースとは別で Octopress 自身の差分を取り込むことができる。
エッジバージョンが使いたければ</p>

<pre><code>% git merge octopress/master
</code></pre>

<p>としてしまうこともできるが要注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 試してる]]></title>
    <link href="http://tosik.github.com/blog/2012/09/12/trying-octopress/"/>
    <updated>2012-09-12T12:46:00+09:00</updated>
    <id>http://tosik.github.com/blog/2012/09/12/trying-octopress</id>
    <content type="html"><![CDATA[<p>Markdown でかけるブログが欲しかった。
はてダもはてなブログもさよなら。</p>

<pre><code>curl get.pow.cx | sh
gem install powder
powder link
subl source/_posts/2012-09-12-trying-octopress.markdown
open http://tosik.github.com.dev
</code></pre>

<p>リアルタイム編集楽しい</p>
]]></content>
  </entry>
  
</feed>
